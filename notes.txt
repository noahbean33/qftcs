1. Core Framework Components
The library must implement the categorical structure of AQFT, focusing on the categories Loc (globally hyperbolic spacetimes) and Alg (unital *-algebras), and support the functorial definition of locally covariant QFTs.
Category Classes:
Loc Category:
Class to represent globally hyperbolic spacetimes 
\boldsymbol{M} = (\mathcal{M}, g, \mathfrak{o}, \mathfrak{t})
, where:
\mathcal{M}
: Smooth manifold (support for arbitrary dimension (n), typically 4, with finitely many connected components).
(g): Lorentzian metric with signature 
(+,-,-,-)
.
\mathfrak{o}
: Orientation (represented by a nowhere-zero smooth (n)-form).
\mathfrak{t}
: Time-orientation (represented by a nowhere-zero smooth (g)-timelike 1-form).
Methods to validate global hyperbolicity (e.g., existence of Cauchy surfaces).
Morphisms: Smooth, isometric embeddings 
\psi: \boldsymbol{M} \rightarrow \boldsymbol{N}
 preserving orientation and time-orientation with causally convex images.
Functionality to check causal convexity of the image 
\psi(\boldsymbol{M})
.
Alg Category:
Class for unital *-algebras (excluding the zero algebra) with unit-preserving injective *-homomorphisms as morphisms.
Support for 
C^*
-algebras as a subcategory (
\mathbf{C^*-Alg}
).
Initial object: Complex numbers 
\mathbb{C}
 as a *-algebra.
Methods to handle algebraic operations (e.g., addition, multiplication, *-operation, unit preservation).
Functor Class:
A class to define a locally covariant QFT as a functor 
\mathscr{A}: \mathbf{Loc} \rightarrow \mathbf{Alg}
.
Methods to:
Assign a *-algebra 
\mathscr{A}(\boldsymbol{M})
 to each spacetime 
\boldsymbol{M} \in \mathbf{Loc}
.
Assign a *-homomorphism 
\mathscr{A}(\psi): \mathscr{A}(\boldsymbol{M}) \rightarrow \mathscr{A}(\boldsymbol{N})
 for each morphism 
\psi: \boldsymbol{M} \rightarrow \boldsymbol{N}
.
Ensure functoriality: 
\mathscr{A}(\psi \circ \varphi) = \mathscr{A}(\psi) \circ \mathscr{A}(\varphi)
 and 
\mathscr{A}(\mathrm{id}_{\boldsymbol{M}}) = \mathrm{id}_{\mathscr{A}(\boldsymbol{M})}
.
Support for subcategories (e.g., 
\mathbf{C^*-Alg}
) and alternative target categories (e.g., 
\mathbf{Phys}
 for general physical systems).
Kinematic Algebras:
Class for kinematic algebras 
\mathscr{A}^{\text{kin}}(\boldsymbol{M}; O)
 for open, causally convex subsets 
O \in \mathcal{O}(\boldsymbol{M})
.
Methods to:
Construct 
\boldsymbol{M}|_O = (O, g|_O, \mathfrak{o}|_O, \mathfrak{t}|_O)
 as a spacetime.
Define inclusion morphisms 
\mathbf{l}_{\boldsymbol{M}; O}: \boldsymbol{M}|_O \rightarrow \boldsymbol{M}
.
Compute 
\mathscr{A}^{\text{kin}}(\boldsymbol{M}; O) = \mathscr{A}(\mathbf{l}_{\boldsymbol{M}; O})(\mathscr{A}(\boldsymbol{M}|_O))
.
Verify isotony: If 
O_1 \subset O_2
, then 
\mathscr{A}^{\text{kin}}(\boldsymbol{M}; O_1) \subset \mathscr{A}^{\text{kin}}(\boldsymbol{M}; O_2)
.
Handle unions and intersections (e.g., 
\mathscr{A}^{\text{kin}}(\boldsymbol{M}; O_1 \cup O_2)
 contains the algebra generated by 
\mathscr{A}^{\text{kin}}(\boldsymbol{M}; O_1)
 and 
\mathscr{A}^{\text{kin}}(\boldsymbol{M}; O_2)
).
Support finite additivity for theories where equality holds in unions.
2. Fundamental Assumptions
The library should enforce the core assumptions of locally covariant QFT (Assumptions 3.1â€“3.3) and provide tools to verify them.
Local Covariance:
Validation method to ensure the functor 
\mathscr{A}
 maps objects and morphisms correctly between Loc and Alg.
Support for checking injectivity of *-homomorphisms.
Einstein Causality:
Method to identify causally disjoint regions 
O_1, O_2 \in \mathcal{O}(\boldsymbol{M})
 (i.e., 
O_1 \subset O_2' = \boldsymbol{M} \setminus \overline{J_{\boldsymbol{M}}(O_2)}
).
Functionality to compute the commutator 
[\mathscr{A}^{\text{kin}}(\boldsymbol{M}; O_1), \mathscr{A}^{\text{kin}}(\boldsymbol{M}; O_2)]
 and verify it is zero.
Support for graded commutators for theories with fermionic fields.
Timeslice Axiom:
Method to identify Cauchy morphisms 
\psi: \boldsymbol{M} \rightarrow \boldsymbol{N}
 (where 
\psi(\boldsymbol{M})
 contains a Cauchy surface of 
\boldsymbol{N}
).
Functionality to verify that 
\mathscr{A}(\psi)
 is an isomorphism.
Tools to compute the Cauchy development 
D_{\boldsymbol{M}}(O)
 for a region 
O \in \mathcal{O}(\boldsymbol{M})
 and verify 
\mathscr{A}^{\text{kin}}(\boldsymbol{M}; O) = \mathscr{A}^{\text{kin}}(\boldsymbol{M}; D_{\boldsymbol{M}}(O))
.
3. Relative Cauchy Evolution
The library should implement relative Cauchy evolution to study the dynamical response to metric perturbations.
Metric Perturbation Class:
Class for compactly supported rank-2 covariant tensor fields 
h \in H(\boldsymbol{M})
 that preserve global hyperbolicity of the deformed spacetime 
\boldsymbol{M}[h] = (\mathcal{M}, g + h, \mathfrak{o}, \mathfrak{t}[h])
.
Methods to:
Validate that 
\boldsymbol{M}[h]
 is globally hyperbolic.
Adjust time-orientation 
\mathfrak{t}[h]
 to agree with 
\mathfrak{t}
 outside 
\text{supp } h
.
Relative Cauchy Evolution:
Class to compute 
\operatorname{rce}_{\boldsymbol{M}}[h] = \mathscr{A}(\mathbf{l}^-) \circ \mathscr{A}(\mathbf{j}^-)^{-1} \circ \mathscr{A}(\mathbf{j}^+) \circ \mathscr{A}(\mathbf{l}^+)^{-1}
.
Methods to:
Select Cauchy morphisms 
\mathbf{l}^\pm: \boldsymbol{M}^\pm \rightarrow \boldsymbol{M}
 and 
\mathbf{j}^\pm: \boldsymbol{M}^\pm \rightarrow \boldsymbol{M}[h]
 with images outside the causal future/past of 
\text{supp } h
.
Compute the automorphism 
\operatorname{rce}_{\boldsymbol{M}}[h]
 on 
\mathscr{A}(\boldsymbol{M})
.
Verify locality: 
\operatorname{rce}_{\boldsymbol{M}}[h]
 acts trivially on 
\mathscr{A}^{\text{kin}}(\boldsymbol{M}; O)
 for 
O \subset (\text{supp } h)^\perp
.
Verify covariance: 
\operatorname{rce}_{\boldsymbol{N}}[\psi_* h] \circ \mathscr{A}(\psi) = \mathscr{A}(\psi) \circ \operatorname{rce}_{\boldsymbol{M}}[h]
.
Specific implementation for the Klein-Gordon field, computing 
\operatorname{rce}_{\boldsymbol{M}}[h] \Phi_{\boldsymbol{M}}(f) = \Phi_{\boldsymbol{M}}(f) - \Phi_{\boldsymbol{M}}((P_{\boldsymbol{M}[h]} - P_{\boldsymbol{M}}) E_{\boldsymbol{M}[h]} f)
.
4. Rigidity Arguments
The library should support the rigidity argument to generalize properties from Minkowski spacetime to curved spacetimes.
Spacetime Deformation Tools:
Functionality to deform a globally hyperbolic spacetime to a more symmetric one (e.g., Minkowski-like or ultrastatic).
Methods to construct morphisms between deformed spacetimes and apply the functor 
\mathscr{A}
.
Property Generalization:
Methods to verify properties like:
Einstein Causality: Generalize from one spacetime to all using local covariance.
Schlieder Property: Nontrivial commutants for local algebras.
Extended Locality: Independence of local algebras for causally disjoint regions.
Reeh-Schlieder Property: Cyclicity of vacuum vectors for local algebras.
Split Property: Statistical independence of spacelike separated regions.
Tools to test these properties in specific spacetimes and extend them via the rigidity argument.
5. State Space and Physical States
The library should provide tools to define and select physical states, focusing on the microlocal spectrum condition and related criteria.
State Class:
Class to represent states as positive linear functionals on 
\mathscr{A}(\boldsymbol{M})
.
Methods to:
Construct Hilbert-space representations (e.g., GNS representations).
Compute expectation values and correlation functions.
Microlocal Spectrum Condition:
Functionality to compute the wavefront set of distributions (e.g., two-point functions) and verify the microlocal spectrum condition.
Tools to check compatibility with positive energy conditions in Minkowski spacetime.
Quantum Energy Inequalities:
Methods to compute bounds on negative energy densities for specific fields (e.g., Klein-Gordon, Dirac).
Support for absolute and relative quantum energy inequalities in curved spacetimes.
Ground and Passive States:
Tools to identify ground states or passive states in ultrastatic spacetimes.
Methods to verify their stability and relation to the microlocal spectrum condition.
No Natural State Theorem:
Implementation of Theorem 11.3 to test for the nonexistence of natural states in dynamically local theories with the Reeh-Schlieder property.
Methods to check for triviality of relative Cauchy evolution and equivalence to the trivial theory 
\mathscr{I}
.
6. Locally Covariant Fields and Symmetries
The library should support the definition and manipulation of locally covariant fields and internal symmetries.
Field Class:
Class for locally covariant fields as natural transformations 
\Phi: \mathscr{D} \rightarrow \mathscr{V} \circ \mathscr{A}
, where 
\mathscr{D}: \mathbf{Loc} \rightarrow \mathbf{Vec}
 maps spacetimes to test function spaces 
C_0^\infty(\boldsymbol{M})
.
Methods to:
Define linear and nonlinear fields (e.g., 
\Phi_{\boldsymbol{M}}(f)
 for 
f \in C_0^\infty(\boldsymbol{M})
).
Verify field properties (e.g., hermiticity: 
\Phi^* = \Phi
).
Compute commutation relations (e.g., 
[\Phi_{\boldsymbol{M}}(f), \Phi_{\boldsymbol{M}}(h)] = i E_{\boldsymbol{M}}(f, h) \mathbb{1}_{\mathscr{A}(\boldsymbol{M})}
).
Support for multiplets transforming under group representations.
Symmetry Class:
Class for internal symmetries as natural transformations 
\eta: \mathscr{A} \rightarrow \mathscr{A}
.
Methods to:
Define automorphism groups 
G \rightarrow \operatorname{Aut}(\mathscr{A})
.
Compute representations on fields (e.g., 
\eta \cdot \Phi
).
Handle continuous representations with respect to the natural topology on 
\operatorname{Aut}(\mathscr{A})
.
Implementation of the spin-statistics theorem in curved spacetimes.
7. Universal Formulation
The library should support the universal definition of theories, particularly the Klein-Gordon theory.
Klein-Gordon Theory Class:
Class to define the Klein-Gordon theory as a pair 
(\mathscr{A}, \Phi)
 with:
\mathscr{A}: \mathbf{Loc} \rightarrow \mathbf{Alg}
 a functor.
\Phi \in \mathrm{Fld}_{\text{lin}}(\mathscr{D}, \mathscr{A})
 a Hermitian linear field satisfying:
\Phi \circ P = 0
 (field equation, where 
P = \square_{\boldsymbol{M}} + m^2 + \xi R_{\boldsymbol{M}}
).
[\Phi, \Phi] = i \mathbb{1}^{(\mathscr{A})} \circ E
 (commutation relations with the advanced-minus-retarded bidistribution (E)).
Universal property: Unique subtheory embedding 
\eta: \mathscr{A} \rightarrow \mathscr{B}
 such that 
\Psi = \eta \cdot \Phi
 for any other pair 
(\mathscr{B}, \Psi)
.
Methods to:
Construct the natural transformation 
P: \mathscr{D} \rightarrow \mathscr{D}
 for the Klein-Gordon operator.
Compute the bidistribution 
E_{\boldsymbol{M}}
 and verify its properties.
Validate the universal property via natural transformations.
General Universal Formulation:
Framework to define other models (e.g., Dirac, Maxwell) universally at the functorial level.
Tools to specify field equations and commutation relations abstractly.
8. Dynamical Locality and SPASs
The library should implement dynamical locality and tools to ensure the SPASs (Same Physics in All Spacetimes) property.
Dynamical Algebra Class:
Class for dynamical algebras 
\mathscr{C}^{\text{dyn}}(\boldsymbol{M}; O)
, generated by 
\mathscr{C}^\bullet(\boldsymbol{M}; K)
 for compact subsets 
K \subset O
.
Methods to:
Compute 
\mathscr{C}^\bullet(\boldsymbol{M}; K) = \{C \in \mathscr{C}(\boldsymbol{M}) : \operatorname{rce}_{\boldsymbol{M}}[h] C = C \text{ for all } h \in H(\boldsymbol{M}), \text{supp } h \subset K^\perp\}
.
Verify dynamical locality: 
\mathscr{C}^{\text{kin}}(\boldsymbol{M}; O) = \mathscr{C}^{\text{dyn}}(\boldsymbol{M}; O)
.
Support for multidiamond neighborhoods as defined in [69].
SPASs Property:
Tools to check for partial isomorphisms between theories and verify they are full isomorphisms (Proposition 11.2).
Methods to construct pathological theories (e.g., 
\mathscr{B}
 from 
\mathscr{A}
) and test for SPASs violations.
Functionality to ensure extended locality (
\mathscr{A}^\bullet(\boldsymbol{M}; \emptyset) = \mathbb{C} \mathbb{1}_{\mathscr{A}(\boldsymbol{M})}
) and additivity for truncated multidiamonds.
9. Specific Models
The library should provide implementations of standard models to serve as examples and test cases.
Klein-Gordon Field:
Class implementing the algebra 
\mathscr{A}(\boldsymbol{M})
 generated by smeared fields 
\Phi_{\boldsymbol{M}}(f)
 with relations:
Linearity: 
f \mapsto \Phi_{\boldsymbol{M}}(f)
.
Hermiticity: 
\Phi_{\boldsymbol{M}}(f)^* = \Phi_{\boldsymbol{M}}(\bar{f})
.
Field equation: 
\Phi_{\boldsymbol{M}}(P_{\boldsymbol{M}} f) = 0
.
Commutation relations: 
[\Phi_{\boldsymbol{M}}(f), \Phi_{\boldsymbol{M}}(h)] = i E_{\boldsymbol{M}}(f, h) \mathbb{1}_{\mathscr{A}(\boldsymbol{M})}
.
Weyl algebra formulation using 
W_{\boldsymbol{M}}(f_\sim)
 for 
f_\sim \in \mathcal{K}(\boldsymbol{M}) = C_0^\infty(\boldsymbol{M}, \mathbb{R}) / (P_{\boldsymbol{M}} C_0^\infty(\boldsymbol{M}, \mathbb{R}))
.
Methods to compute 
E_{\boldsymbol{M}}
 (advanced-minus-retarded Greenâ€™s function) and verify causal convexity conditions.
Support for Hadamard states and their two-point functions.
Other Models:
Classes for Proca, Dirac, and Maxwell fields, with appropriate field equations and commutation relations.
Support for perturbatively constructed interacting theories (e.g., using methods from [95, 96, 94]).
Implementation of the extended algebra of Wick polynomials for the Klein-Gordon field.
10. Additional Features
To make the library practical and extensible, include the following:
Numerical and Symbolic Computation:
Integration with libraries like SymPy for symbolic manipulation of metrics, test functions, and differential operators.
Numerical methods for computing Greenâ€™s functions, wavefront sets, and energy densities bounds (e.g., using NumPy, SciPy).
Visualization Tools:
Tools to visualize spacetimes, causal structures (e.g., light cones, Cauchy surfaces), and regions 
\mathcal{O}(\boldsymbol{M})
.
Plotting capabilities for fields and correlation functions (e.g., using Matplotlib).
Testing and Validation:
Unit tests to verify functoriality, Einstein causality, timeslice axiom, and dynamical locality for implemented models.
Test suites for specific spacetimes (e.g., Minkowski, Schwarzschild, FLRW cosmologies).
Validation of universal properties and SPASs for standard models.
Extensibility:
Modular design to allow user-defined spacetimes, fields, and theories.
Support for non-globally hyperbolic spacetimes as an extension (with warnings about limitations [105, 166]).
Framework to incorporate gauge fields and charge superselection (referencing [85, 25, 131]).
Documentation and Tutorials:
Comprehensive documentation referencing the paperâ€™s sections and equations.
Tutorials demonstrating the Klein-Gordon theory, relative Cauchy evolution, and rigidity arguments.
Examples showing failures of dynamical locality (e.g., massless Klein-Gordon, Maxwell with topological charges).
11. Dependencies and Integration
Mathematical Libraries:
SymPy for symbolic differential geometry and algebra.
NumPy/SciPy for numerical computations (e.g., solving PDEs for Greenâ€™s functions).
SageMath for advanced differential geometry and category theory operations.
Category Theory Support:
Use or adapt a library like category-theory for Python to handle categories, functors, and natural transformations.
Differential Geometry:
Integration with a differential geometry library (e.g., geomstats or a custom implementation) for metrics, connections, and curvature computations.
12. Implementation Notes
Performance:
Optimize for computations in high-dimensional spacetimes and large algebras.
Use sparse representations for test function spaces and algebraic elements where applicable.
Error Handling:
Robust checks for invalid spacetimes (e.g., non-globally hyperbolic), morphisms, or algebraic operations.
Warnings for cases where assumptions (e.g., injectivity, dynamical locality) may fail.
Scalability:
Support for parallel computations (e.g., using multiprocessing or Dask) for large-scale spacetime simulations.
Modular structure to allow incremental addition of new theories and features.
Future Features:
Implement gauge field theories and charge superselection [85, 25, 131].
Support operator product expansions [93, 97] and PCT theorems [92].
Explore Euclidean-Lorentzian relations [100, 101] and geometric modular action [85, 28, 84].
This comprehensive list ensures that the Python library captures the full scope of AQFT in curved spacetimes as described in the paper, providing both theoretical rigor and practical utility for researchers in quantum field theory and mathematical physics.